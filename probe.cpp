// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "probe.h"


/////////////////////////////////////////////////////////////////////////////
// CProbe properties

/////////////////////////////////////////////////////////////////////////////
// CProbe operations

float CProbe::GetX()
{
	float result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

float CProbe::GetY()
{
	float result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

float CProbe::GetZ()
{
	float result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

float CProbe::GetFlckrJEITA()
{
	float result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

long CProbe::GetNumber()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString CProbe::GetId()
{
	CString result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CProbe::SetId(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CProbe::GetSerialNO()
{
	CString result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

float CProbe::GetLv()
{
	float result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

float CProbe::GetUd()
{
	float result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

float CProbe::GetVd()
{
	float result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

long CProbe::GetT()
{
	long result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

float CProbe::GetDEUser()
{
	float result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

float CProbe::GetFlckrFMA()
{
	float result;
	InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

float CProbe::GetSy()
{
	float result;
	InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

float CProbe::GetSx()
{
	float result;
	InvokeHelper(0x17, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

float CProbe::GetDuv()
{
	float result;
	InvokeHelper(0x18, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

float CProbe::GetUsUser()
{
	float result;
	InvokeHelper(0x19, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

float CProbe::GetVsUser()
{
	float result;
	InvokeHelper(0x1a, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

float CProbe::GetLsUser()
{
	float result;
	InvokeHelper(0x1b, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

float CProbe::GetLvfL()
{
	float result;
	InvokeHelper(0x1d, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

float CProbe::GetR()
{
	float result;
	InvokeHelper(0x1e, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

float CProbe::GetG()
{
	float result;
	InvokeHelper(0x1f, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

float CProbe::GetB()
{
	float result;
	InvokeHelper(0x20, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

long CProbe::GetRd()
{
	long result;
	InvokeHelper(0x21, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CProbe::GetRad()
{
	long result;
	InvokeHelper(0x22, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CProbe::GetRfma()
{
	long result;
	InvokeHelper(0x23, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CProbe::GetRjeita()
{
	long result;
	InvokeHelper(0x24, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

float CProbe::GetSpectrum(long Frequency)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		Frequency);
	return result;
}
